// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package ratings

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/camilamedeir0s/bookinfo-serviceweaver/ratings/Ratings",
		Iface: reflect.TypeOf((*Ratings)(nil)).Elem(),
		Impl:  reflect.TypeOf(ratings{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return ratings_local_stub{impl: impl.(Ratings), tracer: tracer, getRatingsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/camilamedeir0s/bookinfo-serviceweaver/ratings/Ratings", Method: "GetRatings", Remote: false, Generated: true}), postRatingsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/camilamedeir0s/bookinfo-serviceweaver/ratings/Ratings", Method: "PostRatings", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return ratings_client_stub{stub: stub, getRatingsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/camilamedeir0s/bookinfo-serviceweaver/ratings/Ratings", Method: "GetRatings", Remote: true, Generated: true}), postRatingsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/camilamedeir0s/bookinfo-serviceweaver/ratings/Ratings", Method: "PostRatings", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return ratings_server_stub{impl: impl.(Ratings), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return ratings_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[Ratings] = (*ratings)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*ratings)(nil)

// Local stub implementations.

type ratings_local_stub struct {
	impl               Ratings
	tracer             trace.Tracer
	getRatingsMetrics  *codegen.MethodMetrics
	postRatingsMetrics *codegen.MethodMetrics
}

// Check that ratings_local_stub implements the Ratings interface.
var _ Ratings = (*ratings_local_stub)(nil)

func (s ratings_local_stub) GetRatings(ctx context.Context, a0 int) (r0 RatingResponse, err error) {
	// Update metrics.
	begin := s.getRatingsMetrics.Begin()
	defer func() { s.getRatingsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "ratings.Ratings.GetRatings", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetRatings(ctx, a0)
}

func (s ratings_local_stub) PostRatings(ctx context.Context, a0 string, a1 []byte) (r0 RatingResponse, err error) {
	// Update metrics.
	begin := s.postRatingsMetrics.Begin()
	defer func() { s.postRatingsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "ratings.Ratings.PostRatings", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.PostRatings(ctx, a0, a1)
}

// Client stub implementations.

type ratings_client_stub struct {
	stub               codegen.Stub
	getRatingsMetrics  *codegen.MethodMetrics
	postRatingsMetrics *codegen.MethodMetrics
}

// Check that ratings_client_stub implements the Ratings interface.
var _ Ratings = (*ratings_client_stub)(nil)

func (s ratings_client_stub) GetRatings(ctx context.Context, a0 int) (r0 RatingResponse, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getRatingsMetrics.Begin()
	defer func() { s.getRatingsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "ratings.Ratings.GetRatings", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s ratings_client_stub) PostRatings(ctx context.Context, a0 string, a1 []byte) (r0 RatingResponse, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.postRatingsMetrics.Begin()
	defer func() { s.postRatingsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "ratings.Ratings.PostRatings", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + (len(a1) * 1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	serviceweaver_enc_slice_byte_87461245(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.3 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type ratings_server_stub struct {
	impl    Ratings
	addLoad func(key uint64, load float64)
}

// Check that ratings_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*ratings_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s ratings_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetRatings":
		return s.getRatings
	case "PostRatings":
		return s.postRatings
	default:
		return nil
	}
}

func (s ratings_server_stub) getRatings(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetRatings(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s ratings_server_stub) postRatings(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 []byte
	a1 = serviceweaver_dec_slice_byte_87461245(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.PostRatings(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type ratings_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that ratings_reflect_stub implements the Ratings interface.
var _ Ratings = (*ratings_reflect_stub)(nil)

func (s ratings_reflect_stub) GetRatings(ctx context.Context, a0 int) (r0 RatingResponse, err error) {
	err = s.caller("GetRatings", ctx, []any{a0}, []any{&r0})
	return
}

func (s ratings_reflect_stub) PostRatings(ctx context.Context, a0 string, a1 []byte) (r0 RatingResponse, err error) {
	err = s.caller("PostRatings", ctx, []any{a0, a1}, []any{&r0})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*RatingResponse)(nil)

type __is_RatingResponse[T ~struct {
	weaver.AutoMarshal
	ID      int            "json:\"id\""
	Ratings map[string]int "json:\"ratings\""
}] struct{}

var _ __is_RatingResponse[RatingResponse]

func (x *RatingResponse) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("RatingResponse.WeaverMarshal: nil receiver"))
	}
	enc.Int(x.ID)
	serviceweaver_enc_map_string_int_c20ee031(enc, x.Ratings)
}

func (x *RatingResponse) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("RatingResponse.WeaverUnmarshal: nil receiver"))
	}
	x.ID = dec.Int()
	x.Ratings = serviceweaver_dec_map_string_int_c20ee031(dec)
}

func serviceweaver_enc_map_string_int_c20ee031(enc *codegen.Encoder, arg map[string]int) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for k, v := range arg {
		enc.String(k)
		enc.Int(v)
	}
}

func serviceweaver_dec_map_string_int_c20ee031(dec *codegen.Decoder) map[string]int {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make(map[string]int, n)
	var k string
	var v int
	for i := 0; i < n; i++ {
		k = dec.String()
		v = dec.Int()
		res[k] = v
	}
	return res
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}
