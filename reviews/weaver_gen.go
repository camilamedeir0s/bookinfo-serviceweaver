// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package reviews

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/camilamedeir0s/bookinfo-serviceweaver/reviews/Reviews",
		Iface: reflect.TypeOf((*Reviews)(nil)).Elem(),
		Impl:  reflect.TypeOf(reviews{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return reviews_local_stub{impl: impl.(Reviews), tracer: tracer, bookReviewsByIDMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/camilamedeir0s/bookinfo-serviceweaver/reviews/Reviews", Method: "BookReviewsByID", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return reviews_client_stub{stub: stub, bookReviewsByIDMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/camilamedeir0s/bookinfo-serviceweaver/reviews/Reviews", Method: "BookReviewsByID", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return reviews_server_stub{impl: impl.(Reviews), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return reviews_reflect_stub{caller: caller}
		},
		RefData: "⟦b050a046:wEaVeReDgE:github.com/camilamedeir0s/bookinfo-serviceweaver/reviews/Reviews→github.com/camilamedeir0s/bookinfo-serviceweaver/ratings/Ratings⟧\n",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[Reviews] = (*reviews)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*reviews)(nil)

// Local stub implementations.

type reviews_local_stub struct {
	impl                   Reviews
	tracer                 trace.Tracer
	bookReviewsByIDMetrics *codegen.MethodMetrics
}

// Check that reviews_local_stub implements the Reviews interface.
var _ Reviews = (*reviews_local_stub)(nil)

func (s reviews_local_stub) BookReviewsByID(ctx context.Context, a0 string) (r0 Response, err error) {
	// Update metrics.
	begin := s.bookReviewsByIDMetrics.Begin()
	defer func() { s.bookReviewsByIDMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "reviews.Reviews.BookReviewsByID", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.BookReviewsByID(ctx, a0)
}

// Client stub implementations.

type reviews_client_stub struct {
	stub                   codegen.Stub
	bookReviewsByIDMetrics *codegen.MethodMetrics
}

// Check that reviews_client_stub implements the Reviews interface.
var _ Reviews = (*reviews_client_stub)(nil)

func (s reviews_client_stub) BookReviewsByID(ctx context.Context, a0 string) (r0 Response, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.bookReviewsByIDMetrics.Begin()
	defer func() { s.bookReviewsByIDMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "reviews.Reviews.BookReviewsByID", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.3 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type reviews_server_stub struct {
	impl    Reviews
	addLoad func(key uint64, load float64)
}

// Check that reviews_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*reviews_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s reviews_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "BookReviewsByID":
		return s.bookReviewsByID
	default:
		return nil
	}
}

func (s reviews_server_stub) bookReviewsByID(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.BookReviewsByID(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type reviews_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that reviews_reflect_stub implements the Reviews interface.
var _ Reviews = (*reviews_reflect_stub)(nil)

func (s reviews_reflect_stub) BookReviewsByID(ctx context.Context, a0 string) (r0 Response, err error) {
	err = s.caller("BookReviewsByID", ctx, []any{a0}, []any{&r0})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Rating)(nil)

type __is_Rating[T ~struct {
	weaver.AutoMarshal
	Stars int    "json:\"stars\""
	Color string "json:\"color\""
}] struct{}

var _ __is_Rating[Rating]

func (x *Rating) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Rating.WeaverMarshal: nil receiver"))
	}
	enc.Int(x.Stars)
	enc.String(x.Color)
}

func (x *Rating) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Rating.WeaverUnmarshal: nil receiver"))
	}
	x.Stars = dec.Int()
	x.Color = dec.String()
}

var _ codegen.AutoMarshal = (*Response)(nil)

type __is_Response[T ~struct {
	weaver.AutoMarshal
	ID          string   "json:\"id\""
	PodName     string   "json:\"podname\""
	ClusterName string   "json:\"clustername\""
	Reviews     []Review "json:\"reviews\""
}] struct{}

var _ __is_Response[Response]

func (x *Response) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Response.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ID)
	enc.String(x.PodName)
	enc.String(x.ClusterName)
	serviceweaver_enc_slice_Review_84ad8c58(enc, x.Reviews)
}

func (x *Response) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Response.WeaverUnmarshal: nil receiver"))
	}
	x.ID = dec.String()
	x.PodName = dec.String()
	x.ClusterName = dec.String()
	x.Reviews = serviceweaver_dec_slice_Review_84ad8c58(dec)
}

func serviceweaver_enc_slice_Review_84ad8c58(enc *codegen.Encoder, arg []Review) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Review_84ad8c58(dec *codegen.Decoder) []Review {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]Review, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = (*Review)(nil)

type __is_Review[T ~struct {
	weaver.AutoMarshal
	Reviewer string  "json:\"reviewer\""
	Text     string  "json:\"text\""
	Rating   *Rating "json:\"rating,omitempty\""
}] struct{}

var _ __is_Review[Review]

func (x *Review) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Review.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Reviewer)
	enc.String(x.Text)
	serviceweaver_enc_ptr_Rating_f2ae2685(enc, x.Rating)
}

func (x *Review) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Review.WeaverUnmarshal: nil receiver"))
	}
	x.Reviewer = dec.String()
	x.Text = dec.String()
	x.Rating = serviceweaver_dec_ptr_Rating_f2ae2685(dec)
}

func serviceweaver_enc_ptr_Rating_f2ae2685(enc *codegen.Encoder, arg *Rating) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_Rating_f2ae2685(dec *codegen.Decoder) *Rating {
	if !dec.Bool() {
		return nil
	}
	var res Rating
	(&res).WeaverUnmarshal(dec)
	return &res
}
